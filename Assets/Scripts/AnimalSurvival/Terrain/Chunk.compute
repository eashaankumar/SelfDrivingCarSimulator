// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
float noiseScale;
float chunkSize;
float chunkHeight;
float3 chunkOffset;
float3 noisePosition;

RWStructuredBuffer<float> density;
RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<int3> edgeConnectList;
static const float permutation[512] = {
        151,160,137, 91, 90, 15,131, 13,201, 95, 96, 53,194,233,  7,225,
        140, 36,103, 30, 69,142,  8, 99, 37,240, 21, 10, 23,190,  6,148,
        247,120,234, 75,  0, 26,197, 62, 94,252,219,203,117, 35, 11, 32,
         57,177, 33, 88,237,149, 56, 87,174, 20,125,136,171,168, 68,175,
         74,165, 71,134,139, 48, 27,166, 77,146,158,231, 83,111,229,122,
         60,211,133,230,220,105, 92, 41, 55, 46,245, 40,244,102,143, 54,
         65, 25, 63,161,  1,216, 80, 73,209, 76,132,187,208, 89, 18,169,
        200,196,135,130,116,188,159, 86,164,100,109,198,173,186,  3, 64,
         52,217,226,250,124,123,  5,202, 38,147,118,126,255, 82, 85,212,
        207,206, 59,227, 47, 16, 58, 17,182,189, 28, 42,223,183,170,213,
        119,248,152,  2, 44,154,163, 70,221,153,101,155,167, 43,172,  9,
        129, 22, 39,253, 19, 98,108,110, 79,113,224,232,178,185,112,104,
        218,246, 97,228,251, 34,242,193,238,210,144, 12,191,179,162,241,
         81, 51,145,235,249, 14,239,107, 49,192,214, 31,181,199,106,157,
        184, 84,204,176,115,121, 50, 45,127,  4,150,254,138,236,205, 93,
        222,114, 67, 29, 24, 72,243,141,128,195, 78, 66,215, 61,156,180,

        151,160,137, 91, 90, 15,131, 13,201, 95, 96, 53,194,233,  7,225,
        140, 36,103, 30, 69,142,  8, 99, 37,240, 21, 10, 23,190,  6,148,
        247,120,234, 75,  0, 26,197, 62, 94,252,219,203,117, 35, 11, 32,
         57,177, 33, 88,237,149, 56, 87,174, 20,125,136,171,168, 68,175,
         74,165, 71,134,139, 48, 27,166, 77,146,158,231, 83,111,229,122,
         60,211,133,230,220,105, 92, 41, 55, 46,245, 40,244,102,143, 54,
         65, 25, 63,161,  1,216, 80, 73,209, 76,132,187,208, 89, 18,169,
        200,196,135,130,116,188,159, 86,164,100,109,198,173,186,  3, 64,
         52,217,226,250,124,123,  5,202, 38,147,118,126,255, 82, 85,212,
        207,206, 59,227, 47, 16, 58, 17,182,189, 28, 42,223,183,170,213,
        119,248,152,  2, 44,154,163, 70,221,153,101,155,167, 43,172,  9,
        129, 22, 39,253, 19, 98,108,110, 79,113,224,232,178,185,112,104,
        218,246, 97,228,251, 34,242,193,238,210,144, 12,191,179,162,241,
         81, 51,145,235,249, 14,239,107, 49,192,214, 31,181,199,106,157,
        184, 84,204,176,115,121, 50, 45,127,  4,150,254,138,236,205, 93,
        222,114, 67, 29, 24, 72,243,141,128,195, 78, 66,215, 61,156,180
};

static const int permutationCount = 255;
static const float3 directions[16] = {
    float3(1, 1, 0),
    float3(-1, 1, 0),
    float3(1,-1, 0),
    float3(-1,-1, 0),
    float3(1, 0, 1),
    float3(-1, 0, 1),
    float3(1, 0,-1),
    float3(-1, 0,-1),
    float3(0, 1, 1),
    float3(0,-1, 1),
    float3(0, 1,-1),
    float3(0,-1,-1),

    float3(1, 1, 0),
    float3(-1, 1, 0),
    float3(0,-1, 1),
    float3(0,-1,-1)
};

static const int caseToNumPolys[256] = {
    0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 2, 3, 4, 4, 3, 3, 4, 4, 3, 4, 5, 5, 2,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4,
    2, 3, 3, 4, 3, 4, 2, 3, 3, 4, 4, 5, 4, 5, 3, 2, 3, 4, 4, 3, 4, 5, 3, 2, 4, 5, 5, 4, 5, 2, 4, 1,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 4, 3, 4, 4, 5, 3, 2, 4, 3, 4, 3, 5, 2,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4, 3, 4, 4, 3, 4, 5, 5, 4, 4, 3, 5, 2, 5, 4, 2, 1,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 2, 3, 3, 2, 3, 4, 4, 5, 4, 5, 5, 2, 4, 3, 5, 4, 3, 2, 4, 1,
    3, 4, 4, 5, 4, 5, 3, 4, 4, 5, 5, 2, 3, 4, 2, 1, 2, 3, 3, 2, 3, 4, 2, 1, 3, 2, 4, 1, 2, 1, 1, 0
};

static const int3 cornerToCubeVertex[8] = {
    int3(0, 0, 0),
    int3(0, 1, 0),
    int3(1, 1, 0),
    int3(1, 0, 0),
    int3(0, 0, 1),
    int3(0, 1, 1),
    int3(1, 1, 1),
    int3(1, 0, 1)
};

static const int2 edgeToCorners[12] = {
    int2(0, 1),
    int2(1, 2),
    int2(3, 2),
    int2(0, 3),
    int2(4, 5),
    int2(5, 6),
    int2(7, 6),
    int2(4, 7),
    int2(0, 4),
    int2(1, 5),
    int2(2, 6),
    int2(3, 7)
};

static const int directionCount = 15;

int to1DTriTable(int r, int c) {
    return c + r * 5;
}

int to1D(int x, int y, int z) {
    return (chunkHeight * chunkSize * z) + (y * chunkSize) + x;
}

/*static float scalar(float3 a, float3 b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

static float smoothDistance(float d)
{
    return d * d * d * (d * (d * 6 - 15) + 10);
}

int3 localToWorldGridPos(int3 localGridPos)
{
    return int3(localGridPos.x + chunkOffset.x * (chunkSize - 1),
        localGridPos.y + chunkOffset.y * (chunkHeight - 1),
        localGridPos.z + chunkOffset.z * (chunkSize - 1));
}

static float noise(float3 _point, float frequency)
{
    _point *= frequency;

    int floored_pointX0 = floor(_point.x);
    int floored_pointY0 = floor(_point.y);
    int floored_pointZ0 = floor(_point.z);

    float distanceX0 = _point.x - floored_pointX0;
    float distanceY0 = _point.y - floored_pointY0;
    float distanceZ0 = _point.z - floored_pointZ0;

    float distanceX1 = distanceX0 - 1;
    float distanceY1 = distanceY0 - 1;
    float distanceZ1 = distanceZ0 - 1;

    floored_pointX0 %= permutationCount;
    floored_pointY0 %= permutationCount;
    floored_pointZ0 %= permutationCount;

    int floored_pointX1 = floored_pointX0 + 1;
    int floored_pointY1 = floored_pointY0 + 1;
    int floored_pointZ1 = floored_pointZ0 + 1;

    int permutationX0 = permutation[floored_pointX0];
    int permutationX1 = permutation[floored_pointX1];

    int permutationY00 = permutation[permutationX0 + floored_pointY0];
    int permutationY10 = permutation[permutationX1 + floored_pointY0];
    int permutationY01 = permutation[permutationX0 + floored_pointY1];
    int permutationY11 = permutation[permutationX1 + floored_pointY1];

    float3 direction000 = directions[permutation[permutationY00 + floored_pointZ0] & directionCount];
    float3 direction100 = directions[permutation[permutationY10 + floored_pointZ0] & directionCount];
    float3 direction010 = directions[permutation[permutationY01 + floored_pointZ0] & directionCount];
    float3 direction110 = directions[permutation[permutationY11 + floored_pointZ0] & directionCount];
    float3 direction001 = directions[permutation[permutationY00 + floored_pointZ1] & directionCount];
    float3 direction101 = directions[permutation[permutationY10 + floored_pointZ1] & directionCount];
    float3 direction011 = directions[permutation[permutationY01 + floored_pointZ1] & directionCount];
    float3 direction111 = directions[permutation[permutationY11 + floored_pointZ1] & directionCount];

    float value000 = scalar(direction000, new Vector3(distanceX0, distanceY0, distanceZ0));
    float value100 = scalar(direction100, new Vector3(distanceX1, distanceY0, distanceZ0));
    float value010 = scalar(direction010, new Vector3(distanceX0, distanceY1, distanceZ0));
    float value110 = scalar(direction110, new Vector3(distanceX1, distanceY1, distanceZ0));
    float value001 = scalar(direction001, new Vector3(distanceX0, distanceY0, distanceZ1));
    float value101 = scalar(direction101, new Vector3(distanceX1, distanceY0, distanceZ1));
    float value011 = scalar(direction011, new Vector3(distanceX0, distanceY1, distanceZ1));
    float value111 = scalar(direction111, new Vector3(distanceX1, distanceY1, distanceZ1));

    float smoothDistanceX = smoothDistance(distanceX0);
    float smoothDistanceY = smoothDistance(distanceY0);
    float smoothDistanceZ = smoothDistance(distanceZ0);

    return lerp(
        lerp(lerp(value000, value100, smoothDistanceX), lerp(value010, value110, smoothDistanceX), smoothDistanceY),
        lerp(lerp(value001, value101, smoothDistanceX), lerp(value011, value111, smoothDistanceX), smoothDistanceY),
        smoothDistanceZ);
}

float getDensityAtLocalGridPoint(int3 localGridPos)
{
    int3 worldGridPos = localToWorldGridPos(localGridPos);

    float3 noiseSample = float3(worldGridPos.x + noisePosition.x, worldGridPos.y + noisePosition.y, worldGridPos.z + noisePosition.z);
    return noise(noiseSample, noiseScale);

}

int getBit(int3 v)
{
    //return density[v.x, v.y, v.z] < 0 ? 0 : 1;
    return getDensityAtLocalGridPoint(v) < 0 ? 0 : 1;
}

static int cellCase(int3 v0)
{
    int v0x = v0.x, v0y = v0.y, v0z = v0.z;
    int3 v1 = int3(v0x, v0y + 1, v0z);
    int3 v2 = int3(v0x + 1, v0y + 1, v0z);
    int3 v3 = int3(v0x + 1, v0y, v0z);
    int3 v4 = int3(v0x, v0y, v0z + 1);
    int3 v5 = int3(v0x, v0y + 1, v0z + 1);
    int3 v6 = int3(v0x + 1, v0y + 1, v0z + 1);
    int3 v7 = int3(v0x + 1, v0y, v0z + 1);
    int caseByte = getBit(v7) << 7 | getBit(v6) << 6 |
        getBit(v5) << 5 | getBit(v4) << 4 |
        getBit(v3) << 3 | getBit(v2) << 2 |
        getBit(v1) << 1 | getBit(v0);
    return caseByte;
}

*/

[numthreads(8, 8, 8)]
void CSMain(int3 id : SV_DispatchThreadID)
{
    //density[to1D(id.x, id.y, id.z)] = getDensityAtLocalGridPoint(id);
}
